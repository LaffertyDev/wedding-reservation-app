import { createClient } from 'https://cdn.jsdelivr.net/npm/@supabase/supabase-js/+esm'

class Guest {
	constructor(name) {
		this.Name = name;
		this.Dinner = null;
		this.Attending = null;
		this.RestrictionsNote = null;
		this.IsChild = false;
	}
}

class Reservation {
	constructor(plusOneAllowed, passcode, guestNames, childNames) {
		this.id = crypto.randomUUID(); // autogenerated
		this.created_at = new Date();
		this.can_add_plus_one = plusOneAllowed;
		this.not_attending_note = null;
		this.plus_one = new Guest(null);
		this.guests = [];
		guestNames.forEach(name => this.guests.push(new Guest(name, false)));
		if (childNames != null) { childNames.forEach(name => this.guests.push(new Guest(name, true))) };
		this.passcode = passcode;
	}
}

export class RSVPBackend {
	constructor() {
		this.supabase = createClient('https://pvlfpzfbdmgegmvaqhsc.supabase.co', 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InB2bGZwemZiZG1nZWdtdmFxaHNjIiwicm9sZSI6ImFub24iLCJpYXQiOjE2NTI0MDc5NDIsImV4cCI6MTk2Nzk4Mzk0Mn0.lGYQHdB3qmP7aoPpL21wW9x6gy-M5E3BhAXMS3uDPF4');
	}
	async SearchForReservation(passcode) {
		let { data: reservation, error } = await this.supabase
			.from('reservation')
			.select('*')
			.eq("passcode", passcode);

		console.log(reservation, error);
		if (error) {
			return Promise.reject("I had a database failure. Please try again later.");
		}

		if (reservation.length === 0) {
			return Promise.reject("No invitation found. Try entering your secret passcode again.");
		}

		return Promise.resolve(reservation[0]);
	}

	async SaveReservation(reservation) {
		const { data, error } = await this.supabase
			.from('reservation')
			.update(reservation)
			.eq('passcode', reservation.passcode);

		if (error) {
			return Promise.reject("There was a big problem updating things");
		}

		return Promise.resolve(data);
	}

	async DeleteAllData() {
		const { data, error } = await this.supabase
			.from('reservation')
		  	.delete()
		  	.eq('can_add_plus_one', false);

		 if (error) { alert(error.message) };

		const { data1, error1 } = await this.supabase
			.from('reservation')
		  	.delete()
		  	.eq('can_add_plus_one', true);

		 if (error1) { alert(error1.message) };
	}

	async UploadRSVPData() {
		const peopleToUpload = [
			new Reservation(true, "super_secret_passcode", ["Nathan Lafferty", "Emily Werdal"]),
			new Reservation(false, "racecar", ["Michael Lafferty", "Debbie Lambert", "Cameron Lamber", "Cassidy Lambert"]),
			new Reservation(false, "florida", ["Andrew Lafferty", "Sarah Lafferty"], ["Lilly Lafferty", "Jackson Lafferty", "Leah Lafferty"]),
			new Reservation(true, "pdiggity", ["Seth Pope"]),
			new Reservation(true, "2010", ["Ian Harris"]),
			new Reservation(false, "slainte", ["Trevor Andersen", "Leah Pope"]),
			new Reservation(false, "travelor", ["Kurry Watson", "Abbie Watson"]),
			new Reservation(false, "ü•ù", ["Kiwi Sullivan", "Breanna Sullivan"]),
			new Reservation(false, "ridethebus", ["Nicholas Clobes", "Nicholas Clobes"]),
			new Reservation(true, "busparty", ["Nick Frazier"]),
			new Reservation(true, "aoe2champ", ["Nick Schneider"]),
			new Reservation(true, "mexico", ["Chase Hill"]),
			new Reservation(true, "westcoast", ["Jordan White"]),
			new Reservation(true, "diablo", ["Josh Moline"]),
			new Reservation(true, "starcraft", ["Craig Moline"]),
			new Reservation(true, "auntdeb", ["Aunt Deb"]),
			new Reservation(true, "grandpa", ["Grandpa"]),
		/*	new Reservation(true, "", ["Mary Werdal"]),
			new Reservation(true, "", ["James Werdal"]),
			new Reservation(false, "", ["Meg Anderson", "Eric Anderson"]),
			new Reservation(false, "", ["Peter Benzoni", "Pavithra Lakshmi Suresh"]),
			new Reservation(true, "", ["Spencer Peterson"]),
			new Reservation(false, "", ["Nicole Morris", "Chris Morris"], ["Daniel", "Carter"]),
			new Reservation(false, "", ["Jenna Gut", "Brian Gut"]),
			new Reservation(false, "", ["Tammy", "Dave Zellmer"]), */
			new Reservation(false, "cvocvo", ["Christopher Van Oort", "Michelle Van Oort"]),
			new Reservation(false, "secretcave", ["Benjamin Sissel", "Brittany Sissel"]),
			new Reservation(false, "scotland", ["Zach Petersen", "Jess Petersen"]),
			new Reservation(false, "boattrip", ["Joe Dohn", "Mel Dillon"]),
			new Reservation(false, "inception", ["Jordan Krohn", "Paula"]),
			new Reservation(true, "gotswole", ["Adam Guzan"]),
			new Reservation(true, "lorenzo", ["Christopher Waters"]),
		];

		const { data, error } = await this.supabase
			.from('reservation')
			.insert(peopleToUpload);

		 if (error) { alert(error.message) };

		return Promise.resolve(data);
	}
}